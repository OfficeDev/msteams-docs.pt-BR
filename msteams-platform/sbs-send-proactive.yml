### YamlMime:Tutorial
title: Enviar mensagens proativas
metadata:
  title: Enviar mensagens proativas
  description: Neste módulo, saiba como enviar mensagens proativas, como mensagens de boas-vindas, mensagens agendadas e notificações de um bot
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Ler mais sobre mensagens proativas
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 9738be897a0f520c137424eb8f5d062c41396f13
  ms.sourcegitcommit: 3dc9b539c6f7fbfb844c47a78e3b4d2200dabdad
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/31/2022
  ms.locfileid: "64571219"
items:
- durationInMinutes: 1
  content: "Uma mensagem proativa é qualquer mensagem enviada por um bot que não responde a uma solicitação de um usuário. Isso inclui mensagens, como:\n - Mensagem de boas-vindas\n - Notificações\n - Mensagens agendadas\n \nEste guia passo a passo ajuda você a enviar uma mensagem proativa de um bot. Você verá as seguintes saídas:\n\n* Mensagem de olá proativa no chat        \n![Olá proativo no chat](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* Mensagem hello proativa como um Cartão Adaptável    \n![hello proativo no Cartão Adaptável](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: Pré-requisitos
  durationInMinutes: 2
  content: "Certifique-se de instalar o seguinte:    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).\n* [ASP.NET e desenvolvimento da Web](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer), ou carga de trabalho de desenvolvimento entre plataformas [do .NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer).\n* [ngrok](https://ngrok.com/download): um aplicativo entre plataformas que permite expor um servidor de desenvolvimento local à Internet com mínimo esforço.\n* [Obter um locatário Teams desenvolvedor gratuito](https://developer.microsoft.com/microsoft-365/dev-program).\n"
- title: Configurar ambiente local
  durationInMinutes: 3
  content: "1.  Baixe o [código de exemplo](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (arquivo ZIP) e extraia os arquivos.\n1.  Vá para os arquivos extraídos e clique duas vezes em **ProactiveBot.csproj**. A solução é aberta em Visual Studio.\n1.  Em Visual Studio, clique com o botão direito do mouse no projeto (**ProactiveBot**) e selecione **Criar** para criar a solução.\n\n    ![Projeto Proactivebot](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>Solução de Problemas</b></summary>\n\n    Se você obter o **erro Não é possível encontrar o** pacote, siga estas etapas:\n\n    1.  Vá para **Ferramentas** >  **NuGet Gerenciador de Pacotes** >  **Gerenciador de Pacotes Configurações**.\n    1.  Na janela **Opções** exibida, **selecione NuGet Gerenciador de Pacotes** >  **Package Sources**.\n    1.  Selecione **Adicionar**.\n    1.  Insira **nuget.org** nos campos **Nome** e **https://api.nuget.org/v3/index.json** **origem** .\n    1.  Selecione **Atualizar** e **OK**.\n    1.  Reconstruir seu projeto.\n    <br>\n\n    </details>\n    \n1. Descompanha para instalar o ngrok.\n   * Windows: **clique duas vezes** ngrok.zip.\n   * Linux ou OS X: unzip ngrok do terminal e execute o `unzip /path/to/ngrok.zip` comando.\n1. Execute ngrok da linha de comando com os seguintes argumentos:\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. Copie a URL ngrok (como realçada na imagem) para fazer referência posterior como URL base ngrok nas próximas etapas. \n\n    ![URL base do ngrok](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: Criar e instalar Teams app
  durationInMinutes: 5
  content: "1. Vá para Teams > **App Studio** e importe o arquivo **AppManifest.zip** disponível no código de exemplo baixado (arquivo ZIP).\n\n    ![App Studio import App](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. Selecione **BotsSet** >  **up**.\n\n    ![Configuração de bot](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. Na janela **Configurar um bot que** aparece, insira **Nome** (por **exemplo,** Demonstração de Mensagem Proativa), selecione **Pessoal** e selecione Criar **bot** para criar o bot.\n\n    ![Criar ID de Bot](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. Anexar **/api/mensagens** à URL base do ngrok (que você copiou) e defini-la como **endereço de ponto de extremidade bot**. Sua URL teria esta aparência: `https://yourngrokdomain.ngrok.io/api/messages`.\n\n    ![Endereço de ponto de extremidade bot](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. Aguarde alguns segundos para que as alterações entre em vigor.     \n\n    > Se estiver demorando mais, selecione **Guias** e, em seguida, a seção **Bots** para forçar a atualização.\n    \n1. Selecione **Gerar nova senha** para gerar a nova Senha do Aplicativo e copiá-la. \n\n    ![Gerar senha do aplicativo](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Vá para Visual Studio e abra o **arquivo appsettings.json**.  Colar a senha como o valor para `MicrosoftAppPassword`.    \n1. Vá para **o App Studio** e copie a ID do aplicativo. \n\n    ![Gerar ID do aplicativo](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Vá para Visual Studio e abra o **arquivo appsettings.json**.  Colar a ID do aplicativo como o valor para `MicrosoftAppId`. Você `appsettings.json` terá os seguintes valores de configuração:    \n\n    ![Valores de appsetting](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. Pressione **F5** ou selecione **IIS express** para executar o código.\n\n    ![Executar código](~/assets/images/proactive-scenario/run-code.png)\n\n    O exemplo de mensagem proativa correspondente é exibido:  \n\n    ![Exemplo de mensagem proativa](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. Vá para **Testar e distribuirInstall** >  para instalar o mesmo aplicativo novamente.\n\n    ![Instalar Aplicativo](~/assets/images/proactive-scenario/install-app.png)   \n\n1. Selecione a `http://localhost:3978/api/notify` URL para obter uma mensagem de saudação proativa no chat.\n\n    ![Mensagem proativa enviada](~/assets/images/proactive-scenario/result.png)\n\n1. Vá para Teams. Você recebe uma mensagem de saudação proativa do bot quando a instalação é bem-sucedida.          \n\n    ![Olá proativo no chat](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: Adicionar Cartão Adaptável à mensagem proativa
  durationInMinutes: 10
  content: "1. Em Visual Studio, pare o processo de depuração.\n\n    ![Parar a depuração](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. Clique com o botão **direito do mouse em Dependências**, selecione **Gerenciar NuGet Pacotes**.\n\n    ![Adicionar pacote de cartão adaptável1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. Em **NuGet ProactiveBot**, selecione **Procurar** e pesquisar **AdaptiveCards** . Selecionar **Instalar**. \n\n    ![Adicionar pacote de cartão adaptável2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. Abra o **arquivo NotifyController.cs** e substitua `BotCallback` o código existente pelo código a seguir para enviar a mensagem Cartão Adaptável:     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. Passe o mouse sobre a linha vermelha e selecione **usar AdaptiveCards** para resolver os erros. \n\n    ![Resolver erro](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. Pressione **F5** para executar o código. \n1. Vá para Teams e desinstale seu aplicativo. \n    \n    ![Desinstalar aplicativo](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. Reinstale o mesmo aplicativo para obter o `conversationUpdate` evento.   \n\n1. Selecione a [http://localhost:3978/api/notify](http://localhost:3978/api/notify) URL para obter uma mensagem de saudação proativa no Cartão Adaptável.     \n"
- title: Desafio completo
  durationInMinutes: 3
  content: >
    Você achou algo assim? É assim que a mensagem hello proativa em Cartão Adaptável é exibida:


    ![hello proativo no Cartão Adaptável](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    Você concluiu o cenário.

    * Você pode enviar notificações diariamente ou solicitar comentários do usuário periodicamente.

    * Manipular limites de limitação para evitar várias notificações.
